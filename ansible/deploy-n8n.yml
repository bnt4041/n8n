---
- name: Despliegue completo n8n en servidor LAMP + Docker
  hosts: n8n_servers
  become: true
  vars:
    n8n_repo_url: "https://github.com/bnt4041/n8n.git"  # Ajusta si es privado
    n8n_install_path: "/var/www/html/n8n"
    n8n_domain: "example.com"            # Sobrescribe vía --extra-vars
    n8n_db_password: "CHANGEME_DB_PASS"  # --extra-vars "n8n_db_password=..."
    n8n_basic_auth_password: "CHANGEME_UI_PASS"
    docker_compose_version: "v2.27.0"    # Última estable (ajustar según necesidad)
    n8n_systemd_unit: "/etc/systemd/system/n8n-stack.service"
    enable_https: false                   # Cambiar a true para emitir certificado
    certbot_email: "admin@example.com"   # Correo para ACME/Let’s Encrypt

  pre_tasks:
    - name: Verificar distribución soportada
      ansible.builtin.assert:
        that: ansible_facts['os_family'] in ['Debian', 'RedHat']
        fail_msg: "Solo se soportan familias Debian/RedHat en este playbook."

  tasks:
    - name: Actualizar cache de paquetes (Debian)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_facts['os_family'] == 'Debian'

    - name: Instalar paquetes base (Debian)
      ansible.builtin.apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
          - git
          - apache2
          - php
          - libapache2-mod-php
          - php-cli
          - php-common
          - php-curl
          - php-xml
          - php-mbstring
          - php-zip
          - php-pgsql
          - unzip
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Instalar paquetes base (RedHat)
      ansible.builtin.yum:
        name:
          - curl
          - ca-certificates
          - git
          - httpd
          - php
          - php-cli
          - php-common
          - php-curl
          - php-xml
          - php-mbstring
          - php-zip
          - php-pgsql
          - unzip
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Habilitar módulos necesarios Apache (Debian)
      ansible.builtin.command: a2enmod proxy proxy_http headers
      when: ansible_facts['os_family'] == 'Debian'
      register: a2enmod_result
      changed_when: a2enmod_result.rc == 0

    - name: Habilitar mod_rewrite (Debian) para redirección HTTPS
      ansible.builtin.command: a2enmod rewrite ssl
      when: ansible_facts['os_family'] == 'Debian' and enable_https | bool
      register: a2enmod_rewrite
      changed_when: a2enmod_rewrite.rc == 0

    - name: Asegurar arranque de Apache/httpd
      ansible.builtin.service:
        name: "{{ 'apache2' if ansible_facts['os_family'] == 'Debian' else 'httpd' }}"
        state: started
        enabled: true

    - name: Instalar Docker (si no está) - Script oficial convenience
      ansible.builtin.shell: |
        if ! command -v docker >/dev/null 2>&1; then
          curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && rm get-docker.sh
        fi
      args:
        creates: /usr/bin/docker

    - name: Instalar docker compose plugin (binario) si no existe
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      when: not lookup('ansible.builtin.fileglob', '/usr/local/bin/docker-compose')

    - name: Crear grupo docker (por si no existe)
      ansible.builtin.group:
        name: docker
        state: present

    - name: Añadir usuario actual (si existe variable ansible_user) al grupo docker
      ansible.builtin.user:
        name: "{{ ansible_user | default('root') }}"
        groups: docker
        append: true
      when: ansible_user is defined

    - name: Crear carpeta destino n8n
      ansible.builtin.file:
        path: "{{ n8n_install_path }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Clonar/actualizar repositorio n8n
      ansible.builtin.git:
        repo: "{{ n8n_repo_url }}"
        dest: "{{ n8n_install_path }}"
        version: main
        force: true

    - name: Copiar template .env
      ansible.builtin.template:
        src: n8n.env.j2
        dest: "{{ n8n_install_path }}/.env"
        mode: '0600'

    - name: Asegurar docker-compose.yml presente (copiar desde repo local clonado)
      ansible.builtin.stat:
        path: "{{ n8n_install_path }}/docker-compose.yml"
      register: compose_file

    - name: Falla si falta docker-compose.yml
      ansible.builtin.fail:
        msg: "No se encontró docker-compose.yml en {{ n8n_install_path }}."
      when: not compose_file.stat.exists

    - name: Deploy VirtualHost Apache
      ansible.builtin.template:
        src: n8n-vhost.conf.j2
        dest: "{{ '/etc/apache2/sites-available/n8n.conf' if ansible_facts['os_family']=='Debian' else '/etc/httpd/conf.d/n8n.conf' }}"
        mode: '0644'

    - name: Enable site (Debian)
      ansible.builtin.file:
        src: /etc/apache2/sites-available/n8n.conf
        dest: /etc/apache2/sites-enabled/n8n.conf
        state: link
      when: ansible_facts['os_family'] == 'Debian'

    - name: Reload Apache
      ansible.builtin.service:
        name: "{{ 'apache2' if ansible_facts['os_family'] == 'Debian' else 'httpd' }}"
        state: reloaded

    - name: Instalar Certbot (Debian)
      ansible.builtin.apt:
        name:
          - certbot
          - python3-certbot-apache
        state: present
      when: enable_https | bool and ansible_facts['os_family'] == 'Debian'

    - name: Instalar Certbot (RedHat)
      ansible.builtin.yum:
        name:
          - certbot
          - python3-certbot-apache
        state: present
      when: enable_https | bool and ansible_facts['os_family'] == 'RedHat'

    - name: Emitir/renovar certificado Let’s Encrypt
      ansible.builtin.command: >-
        certbot --apache -n --agree-tos -m {{ certbot_email }}
        -d {{ n8n_domain }} --redirect --no-eff-email
      when: enable_https | bool
      register: certbot_issue
      changed_when: certbot_issue.rc == 0

    - name: Recargar Apache tras certificados
      ansible.builtin.service:
        name: "{{ 'apache2' if ansible_facts['os_family'] == 'Debian' else 'httpd' }}"
        state: reloaded
      when: enable_https | bool

    - name: Crear systemd unit para stack n8n
      ansible.builtin.copy:
        dest: "{{ n8n_systemd_unit }}"
        mode: '0644'
        content: |
          [Unit]
          Description=n8n Docker Stack
          Requires=docker.service
          After=docker.service network.target

          [Service]
          Type=simple
          WorkingDirectory={{ n8n_install_path }}
          ExecStart=/usr/bin/docker compose up -d
          ExecStop=/usr/bin/docker compose down
          TimeoutStartSec=0
          RemainAfterExit=yes
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target

    - name: Recargar systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Iniciar y habilitar servicio n8n-stack
      ansible.builtin.service:
        name: n8n-stack
        state: started
        enabled: true

    - name: Asegurar contenedores levantados (primer arranque)
      ansible.builtin.command: docker compose up -d
      args:
        chdir: "{{ n8n_install_path }}"

  post_tasks:
    - name: Mostrar URL final
      ansible.builtin.debug:
        msg: "Despliegue completado. Accede a https://{{ n8n_domain }} (configura HTTPS si aún no)."
